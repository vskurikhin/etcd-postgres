// Code generated by MockGen. DO NOT EDIT.
// Source: ./pool/pool.go
//
// Generated by this command:
//
//	mockgen -source=./pool/pool.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	clientv3 "go.etcd.io/etcd/client/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockEtcdPool is a mock of EtcdPool interface.
type MockEtcdPool struct {
	ctrl     *gomock.Controller
	recorder *MockEtcdPoolMockRecorder
}

// MockEtcdPoolMockRecorder is the mock recorder for MockEtcdPool.
type MockEtcdPoolMockRecorder struct {
	mock *MockEtcdPool
}

// NewMockEtcdPool creates a new mock instance.
func NewMockEtcdPool(ctrl *gomock.Controller) *MockEtcdPool {
	mock := &MockEtcdPool{ctrl: ctrl}
	mock.recorder = &MockEtcdPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEtcdPool) EXPECT() *MockEtcdPoolMockRecorder {
	return m.recorder
}

// AcquireClient mocks base method.
func (m *MockEtcdPool) AcquireClient() (clientv3.KV, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireClient")
	ret0, _ := ret[0].(clientv3.KV)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcquireClient indicates an expected call of AcquireClient.
func (mr *MockEtcdPoolMockRecorder) AcquireClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireClient", reflect.TypeOf((*MockEtcdPool)(nil).AcquireClient))
}

// GracefulClose mocks base method.
func (m *MockEtcdPool) GracefulClose() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GracefulClose")
	ret0, _ := ret[0].(error)
	return ret0
}

// GracefulClose indicates an expected call of GracefulClose.
func (mr *MockEtcdPoolMockRecorder) GracefulClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulClose", reflect.TypeOf((*MockEtcdPool)(nil).GracefulClose))
}

// ReleaseClient mocks base method.
func (m *MockEtcdPool) ReleaseClient(arg0 clientv3.KV) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseClient", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseClient indicates an expected call of ReleaseClient.
func (mr *MockEtcdPoolMockRecorder) ReleaseClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseClient", reflect.TypeOf((*MockEtcdPool)(nil).ReleaseClient), arg0)
}
